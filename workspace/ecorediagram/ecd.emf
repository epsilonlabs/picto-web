package ecd;

class Diagram {
	attr String name;
	attr String preamble;
	attr String postamble;
	val Include[*] includes;
	transient val Type[*] types;
	transient val Association[*] associations;
	val Constraint[*] constraints;
}

class Constraint {
	attr String above;
	attr String below;
	attr String left;
	attr String right;
}

class Include {
	attr String name;
	transient ref Type#include type;
}

abstract class Type {
    transient attr boolean ~interface = false;
    transient attr boolean ~abstract = false;
	transient attr String name;
	transient ref Include#type include;
}

class Enumeration extends Type {
	
}

class Class extends Type {
	transient val Attribute[*] attributes;
	transient val Reference[*] references;
	transient ref Class[*] superTypes;
	transient val Method[*] methods;
}

class Attribute  {
	transient attr String name;
	transient attr String type;
	transient attr boolean many;
}

class Association {
	transient val Reference[*] references;
}

class Method {
	transient attr String name;
	transient attr String type;
	transient val Parameter[*] parameters;
	transient attr String[*] exceptions;
}

class Parameter {
	transient attr String name;
	transient attr String type;
}

class Reference {
	transient attr String name;
	transient attr boolean many;
	transient ref Class type;
}

