package ecd;


class Diagram {
	attr String name;
	attr String preamble;
	attr String postamble;
	val Include[*] includes;
	val Type[*] types;
	val Association[*] associations;
	val Constraint[*] constraints;
}

class Constraint {
	attr String above;
	attr String below;
	attr String left;
	attr String right;
}

class Include {
	attr String name;
	ref Type#include type;
}

abstract class Type {
    attr boolean ~interface = false;
    attr boolean ~abstract = false;
	attr String name;
	ref Include#type include;
}

class Enumeration extends Type {
	
}

class Class extends Type {
	val Attribute[*] attributes;
	val Reference[*] references;
	ref Class[*] superTypes;
	val Method[*] methods;
}

class Attribute  {
	attr String name;
	attr String type;
	attr boolean many;
}

class Association {
	val Reference[*] references;
}

class Method {
	attr String name;
	attr String type;
	val Parameter[*] parameters;
	attr String[*] exceptions;
}

class Parameter {
	attr String name;
	attr String type;
}

class Reference {
	attr String name;
	attr boolean many;
	ref Class type;
}

